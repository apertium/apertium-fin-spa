!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = (ND sg) sg pl sp ND;
gender = (GD m) m f mf GD;
case = (CC nom) nom gen par ine ela ill ade abl all tra ess com ;
det_type = def ind dem itg;
tensemood = pres past fut ifi pri fti cni;
numtype = (NT card) card ord NT ;
prntype = pers dem ;
nptype = ant top cog al ;
comparison = (CO pst) pst cmp sup ;
person = p1 p2 p3 ;
voice = (VO actv) actv pasv ; 
inftype = inf ger infa infe infma ;
pcptype = pp pprs ;
neg = neg conneg ;

ones = uno ;
!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

verb_pcp: _.voice.pcptype.comparison.number.case;
verb_conneg: _.voice.tensemood.number.neg;
vbinf: _.voice.inftype.number.case;
vblex: _.voice.tensemood.person.number.neg;
vbmod: _.voice.tensemood.person.number.neg;
vbser: _.voice.tensemood.person.number.neg;
vbhaver: _.voice.tensemood.person.number.neg;
np: _.nptype.gender.number.case;
n: _.number.case;
det: _.number.case;
adj: _.comparison.number.case;
num: _.numtype.number.case;
prn: _.number.case;
pr: _;
post: _;

! words
V: _.number.person;
NUM: _;
N: _;
A: _;
DET: _;
PRN: _;

! phrases
NUMP: _;
NP: _.number;
VP: _;

!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tensemood > tensemood : ifi past, fti fut;
inftype > inftype : inf infa , ger infma;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!



!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!

! Example rule:
! Input:  ^ראש<n><m><sg>/hovud<n><nt><sg>$ ^גדול<adj><m><sg>/stor<adj><nt><sg>$
! Output: ^stor<adj><nt><sg>$ ^hovud<n><nt><sg>$
! NP -> n.$number adj { 2[gender=1.gender, number=1.number] _ 1 } ;


VP -> no@adv vblex { ei@vaux.neg.actv.[2.person].[2.number] _
                     2(verb_conneg)[neg=conneg,
                        number=(if (2.tensemood/tl=ifi) 2.number else "")] } |
      no@adv vbmod { ei@vaux.neg.actv.[2.person].[2.number] _
                     2(verb_conneg)[neg=conneg,
                         number=(if (2.tensemood/tl=ifi) 2.number else "")] } |
      no@adv vbser { ei@vaux.neg.actv.[2.person].[2.number] _
                     2(verb_conneg)[neg=conneg,
                          number=(if (2.tensemood/tl=ifi) 2.number else "")] } ;
NUMP -> num n { 1 _ 2[case=(if (2.lem/sl incl ones) nom else par),
                      number=sg] } ;
NP -> det n { 2 } |
      a@pr np { 2[case=par] } |
      de@pr np { 2[case=par] } |
      1: de@pr n { 2[case=par]  } |
      1: a@pr n { 2[case=par] } |
      pr det n { 3[case=gen] _ 1 } |
      pr n { 2[case=gen] _ 1 } ;
A -> adj { 1 } ;
N -> n { 1 } |
     np { 1 } ;
NUM -> num { 1 } ;
V -> vblex.inf [$person=p3] { 1(vbinf)[case=lat] } |
     vblex.ger [$person=p3] { 1(vbinf)[case=ine] } |
     vblex.pp [$person=p3] { 1(verb_pcp) } |
     vblex.pprs [$person=p3] { 1(verb_pcp) } |
     vbser.inf [$person=p3] { 1(vbinf)[case=lat] } |
     %vblex { %1 } |
     %vbmod { %1 } |
     %vbser { %1 } |
     %vbhaver { %1 } ;
PRN -> prn { 1 } ;
DET -> det { 1 } ;
! Resources:
! https://wiki.apertium.org/wiki/Apertium-recursive
! https://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! https://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
